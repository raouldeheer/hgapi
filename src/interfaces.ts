import { Client, Packets, ResponseType } from "hagcp-network-client";
import { DataStore } from "hagcp-utils";
import { CachedRequests } from "./cache/cachedRequests";
import { EndpointHandler } from "./endpoint";

type LongToString<T> = {
    [P in keyof T]: T[P] extends Long ? string : T[P] extends Long[] ? string[] : T[P];
};

export interface APIConfig {
    client?: Client;
    datastore: DataStore;
    expressDatastore: DataStore;
    lookupFactions: Map<string, any>;
    lookupTemplateFaction: Map<string, any>;
    resolveTitle: (bftitle: string) => MapPoint;
    toBFTitle: (id: string) => string;
    staticMaxAge: number;
    websockets: Map<string, Set<string>>;
    GetMissionDetailsCache: CachedRequests<string, GetMissionDetailsResponse>;
    endpoint: EndpointHandler;
}

export interface Battle {
    id: string;
    warid: string;
    mapEntityId: string;
    mapEntityTypeId: string;
    start: string;
    factioncount: number;
    excludedFactionId: string;
    position: number;
    activationTimeStamp: string;
}

export interface MapPoint {
    id: string;
    mapid: string;
}

export interface Battlefield extends MapPoint {
    bftitle: string;
    sector: string;
    posx: number;
    posy: number;
    gamemap: string;
}

export interface Accesspoint {
    id: string;
    mapid: string;
    template: string;
    battlefield: string;
}

export interface AccesspointTemplate {
    id: string;
    gamemap: string;
    posx: number;
    posy: number;
    abbr: string;
    actionid: number;
}

export interface Supplyline extends MapPoint {
    accesspoint1Id: string;
    accesspoint2Id: string;
    supplylinetemplateid: string;
}

export interface Faction extends LongToString<Packets.war_catalogue_faction> {
    color: string;
}

export interface SearchPlayerDetailResponse {
    response: ResponseType;
    playerId?: string;
    gamertag?: string;
    factiontemplateid?: string;
    warName?: string;
}

export interface mapentitystatus {
    id: string;
    warid: string;
    factionid: string;
    mapEntityId: string;
}

export interface supplylinestatus {
    id: string;
    warid: string;
    factionid: string;
    supplylineid: string;
}

export interface battlefieldstatus {
    id: string;
    warid: string;
    battlefieldid: string;
    factionid: string;
}

export interface War {
    name:                   string;
    factions:               WarFaction[];
    resources:              Resource[];
    totalSkirmishMissions:  number;
    activeSkirmishMissions: number;
    totalAssaulthMissions:  number;
    activeAssaultMissions:  number;
}

export interface WarFaction {
    factionTemplateId: string;
    playersOnline:     number;
}

export interface Resource {
    factionTemplateId:      string;
    armyResourceCategoryId: string;
    count:                  string;
    hq:                     boolean;
}

export interface GetMissionDetailsResponse {
    response: ResponseType;
    info?: MissionInfo;
    factions: MissionDetailsFaction[];
    assaultTeams: MissionDetailsAssaultTeam[];
    armyResources: MissionDetailsArmyResource[];
    accessPoints: MissionDetailsAccessPoint[];
    capturepointStatuses: MissionDetailsCapturepointStatus[];
    posX: number;
    posY: number;
}

export const enum MissionStatus {
    MissionOpen = 1,
    MissionRunning = 2,
    MissionEnding = 3,
}

export interface MissionInfo {
    missionId: string;
    battleId: string;
    missionpreset: string;
    mapEntityId: string;
    mapEntityTypeId: string;
    isAutogenerated: number;
    defenderFactionId: string;
    status: MissionStatus;
    hostingCenterId: string;
    activationTimeStamp: string;
    weatherTimeOfDay: number;
    weatherCondition: number;
}

export interface MissionDetailsFaction {
    factionId: string;
    players: MissionDetailsPlayer[];
}

export interface MissionDetailsPlayer {
    gamerTag: string;
}

export interface MissionDetailsAssaultTeam {
    factionId: string;
    commandNodeTemplateId: string;
    accessPointTemplateId: string;
    ownerPlayerId: string;
}

export interface MissionDetailsArmyResource {
    factionId: string;
    armyResourceCategoryId: string;
    accessPointTemplateId: string;
    count: number;
    spawnInAir: boolean;
}

export interface MissionDetailsAccessPoint {
    accessPointTemplateId: string;
    factionTemplateId: string;
}

export interface MissionDetailsCapturepointStatus {
    capturepointTemplateId: string;
    ownerFactionId: string;
}
